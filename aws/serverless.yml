# serverless.yml
service: player-name-service

provider:
  name: aws
  runtime: nodejs16.x
  region: us-west-2
  stage: ${opt:stage, "development"}
  lambdaHashingVersion: 20201221

  environment:
    PLAYER_TABLE: ${self:service}-${self:provider.stage}-playerTable
    INFO_TABLE: ${self:service}-${self:provider.stage}-infoTable
    CACHE_BUCKET: ${self:service}-${self:provider.stage}-cache-bucket

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:QueryItem
            - dynamodb:BatchWriteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PLAYER_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.INFO_TABLE}"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource: "arn:aws:s3:::${self:provider.environment.CACHE_BUCKET}/*"

functions:
  addPlayer:
    handler: source/main.addPlayer
    events:
      - http:
          path: addPlayer/{firstName}/lastName/{lastName}
          method: post
          cors: true
  getAllPlayers:
    handler: source/main.getAllPlayers
    events:
      - http:
          path: getAllPlayers
          method: get
          cors: true
  removePlayer:
    handler: source/main.removePlayer
    events:
      - http:
          path: removePlayer/{key}
          method: post
          cors: true
  modifyPlayer:
    handler: source/main.modifyPlayer
    events:
      - http:
          path: modifyPlayer/{key}/firstName/{firstName}/lastName/{lastName}
          method: post
          cors: true
  importFromAllData:
    handler: source/main.importFromAllData
    events:
      - http:
          path: importFromAllData
          method: post
          cors: true

resources:
  Resources:
    playerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PLAYER_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
          - AttributeName: last_active
            AttributeType: N
          - AttributeName: membership
            AttributeType: N
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: lastActiveIndex
            KeySchema:
              - AttributeName: last_active
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
          - IndexName: membershipIndex
            KeySchema:
              - AttributeName: membership
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
    infoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.INFO_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
    cacheBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketName: ${self:provider.environment.CACHE_BUCKET}
